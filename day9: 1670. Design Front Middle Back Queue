//https://leetcode.com/problems/design-front-middle-back-queue/
class FrontMiddleBackQueue {
private:
    deque<int>dq1;
    deque<int>dq2;
    int n1=0,n2=0;
public:
    FrontMiddleBackQueue() {
        
    }
    
    void pushFront(int val) {
        dq1.push_front(val);
        if(n1==n2)
        {
            n1++;
        }
        else
        {
            dq2.push_front(dq1.back());
            dq1.pop_back();
            n2++;
        }
    }
    
    void pushMiddle(int val) {
        if(n1==n2)
        {
            dq1.push_back(val);
            n1++;
        }
        else
        {
            dq2.push_front(dq1.back());
            dq1.pop_back();
            dq1.push_back(val);
            n2++;
        }
    }
    
    void pushBack(int val) {
        dq2.push_back(val);
        if(n2<n1)
        {
            n2++;
        }
        else
        {
            dq1.push_back(dq2.front());
            dq2.pop_front();
            n1++;
        }
    }
    
    int popFront() {
        if(n1==0&&n2==0)
        {
            return -1;
        }
        else
        {
            int ans=dq1.front();
            dq1.pop_front();
            n1--;
            if(n1<n2)
            {
                dq1.push_back(dq2.front());
                dq2.pop_front();
                n2--;
                n1++;
            }
            return ans;
        }
    }
    
    int popMiddle() {
        if(n1==0&&n2==0)
        {
            return -1;
        }
        else
        {
            int ans=dq1.back();
            dq1.pop_back();
            n1--;
            if(n1<n2)
            {
                dq1.push_back(dq2.front());
                dq2.pop_front();
                n2--;
                n1++;
            }
            return ans;
        }
    }
    
    int popBack() {
        if(n1==0&&n2==0)
        {
            return -1;
        }
        if(n2==0)
        {
            int ans=dq1.back();
            dq1.pop_back();
            n1--;
            return ans;
        }
        else
        {
            int ans=dq2.back();
            dq2.pop_back();
            n2--;
            if(n2+1<n1)
            {
                dq2.push_front(dq1.back());
                dq1.pop_back();
                n1--;
                n2++;
            }
            return ans;
        }
    }
};

/**
 * Your FrontMiddleBackQueue object will be instantiated and called as such:
 * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();
 * obj->pushFront(val);
 * obj->pushMiddle(val);
 * obj->pushBack(val);
 * int param_4 = obj->popFront();
 * int param_5 = obj->popMiddle();
 * int param_6 = obj->popBack();
 */
