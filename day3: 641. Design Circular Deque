// https://leetcode.com/problems/design-circular-deque/
class MyCircularDeque {
private:
int max_size;
int size;
    struct dll{
        int val;
        dll* next;
        dll* prev;
    };
    dll* front;
    dll*rear;
public:
    MyCircularDeque(int k) {
        max_size=k;
        size=0;
    }
    
    bool insertFront(int value) {
        if(size==max_size)
        {
            return false;
        }
        if(size==0)
        {
            dll*temp=new dll;
            temp->val=value;
            front=temp;
            rear=temp;
        }
        else
        {
            dll*temp=new dll;
            temp->val=value;
            front->prev=temp;
            front->prev->next=front;
            front=front->prev;
        }
        size++;
        return true;
    }
    
    bool insertLast(int value) {
        if(size==max_size)
        {
            return false;
        }
        if(size==0)
        {
            dll*temp=new dll;
            temp->val=value;
            front=temp;
            rear=temp;
        }
        else
        {
            dll*temp=new dll;
            temp->val=value;
            rear->next=temp;
            rear->next->prev=rear;
            rear=rear->next;
        }
        size++;
        return true;
    }
    
    bool deleteFront() {
        if(size==0)
        {
            return false;
        }
        else
        {
            front=front->next;
            size--;
            return true;
        }
    }
    
    bool deleteLast() {
        if(size==0)
        {
            return false;
        }
        else
        {
            rear=rear->prev;
            size--;
            return true;
        }
    }
    
    int getFront() {
        if(size==0)
        {
            return -1;
        }
        else
        {
            return front->val;
        }
    }
    
    int getRear() {
        if(size==0)
        {
            return -1;
        }
        else
        {
            return rear->val;
        }
    }
    
    bool isEmpty() {
        if(size==0)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    bool isFull() {
        if(size==max_size)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
