//https://leetcode.com/problems/split-linked-list-in-parts/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans(k,NULL);
        ListNode*curr=head;
        int len=0;
        while(curr!=NULL)
        {
            len++;
            curr=curr->next;
        }
        int x=len/k;
        int extra=len%k;
        int i=0;
        curr=head;
        ListNode*prev=NULL;
        while(i<k&&curr!=NULL)
        {
            ans[i]=curr;
            for(int j=0;j<x+(extra>0?1:0);j++)
            {
                prev=curr;
                curr=curr->next;
            }
            prev->next=NULL;
            i++;
            extra--;
        }
        return ans;
    }
};
